name: PR BuildAndTest.CI
on:
  push:
    branches: [ main ]
    tags:
      - '*'
  pull_request:
    branches: [ main ]

env:
  buildPlatform: x64
  buildConfiguration: Release
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  dotnetVersion: 3.1.x
  pythonVersion: 3.7

jobs:
  build-test-csharp:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest ]
        solutionDir: [ './RTConvert', './Echo' ]
    steps:
    - uses: actions/checkout@v2
      with:
        lfs: true

    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: ${{ env.dotnetVersion }}

    - name: Print .NET  version
      run: dotnet --info

    - name: Clean package cache as a temporary workaround for https://github.com/actions/setup-dotnet/issues/155
      run: dotnet clean ${{ matrix.solutionDir }} --configuration ${{ env.buildConfiguration }} && dotnet nuget locals all --clear

    - name: Restore Dependencies
      run: dotnet restore ${{ matrix.solutionDir }}

    - name: Build Solution
      run: dotnet build ${{ matrix.solutionDir }} --configuration ${{ env.buildConfiguration }} --no-restore /p:Platform=${{ env.buildPlatform }}

    - name: For testing on Ubuntu, install libgdiplus
      if: matrix.os == 'ubuntu-latest'
      run: apt-get -s install libgdiplus

    - name: Run Unit Tests
      run: dotnet test ${{ matrix.solutionDir }} --configuration ${{ env.buildConfiguration }} --no-restore

    - name: Publish
      run: dotnet publish ${{ matrix.solutionDir }} --configuration ${{ env.buildConfiguration }} -p:Platform=${{ env.buildPlatform }}

    - name: Upload Echo Build Artifacts
      if: matrix.os == 'ubuntu-latest' && matrix.solutionDir == './Echo'
      uses: actions/upload-artifact@v2
      with:
        name: echo
        path: Echo/Echo/bin/${{ env.buildPlatform }}/${{ env.buildConfiguration }}/netcoreapp3.1/publish/*

    - name: Upload RTConvert Build Artifacts
      if: matrix.os == 'ubuntu-latest' && matrix.solutionDir == './RTConvert'
      uses: actions/upload-artifact@v2
      with:
        name: rtconvert
        path: RTConvert/Microsoft.RTConvert.Console/bin/${{ env.buildPlatform }}/${{ env.buildConfiguration }}/netcoreapp3.1/publish/*

  build-test-python:
    runs-on: ubuntu-latest
    needs: [build-test-csharp]
    steps:
      - uses: actions/checkout@v2
        with:
          lfs: true

      - name: Set up Python ${{ env.pythonVersion }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.pythonVersion }}

      - name: Display Python version
        run: python -c "import sys; print(sys.version)"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f build_requirements.txt ]; then pip install -r build_requirements.txt; fi

      - name: flake8
        run: flake8 . --count --exit-zero --statistics

      - name: mypy
        run: |
          mypy setup.py
          mypy -p src
          mypy -p tests

      - name: Download Echo Build Artifact
        uses: actions/download-artifact@v2
        with:
          name: echo
          path: src/InnerEye_DICOM_RT/bin/netcoreapp3.1

      - name: Download RTConvert Build Artifact
        uses: actions/download-artifact@v2
        with:
          name: rtconvert
          path: src/InnerEye_DICOM_RT/bin/netcoreapp3.1

      - name: Test with pytest
        run: pytest --cov=src --cov-report=html tests

      - name: Archive code coverage results
        uses: actions/upload-artifact@v2
        with:
          name: code-coverage-report
          path: htmlcov/*

      - name: Build Distribution
        run: python setup.py sdist bdist_wheel

      - name: Upload Distribution
        uses: actions/upload-artifact@v2
        with:
          name: dist
          path: dist/*

  test-artifact-pkg:
    runs-on: ubuntu-latest
    needs: [build-test-python]
    strategy:
      matrix:
        packageName: [ '*.whl', '*.tar.gz' ]
    steps:
      - uses: actions/checkout@v2
        with:
          lfs: true

      - name: Set up Python ${{ env.pythonVersion }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.pythonVersion }}

      - name: Display Python version
        run: python -c "import sys; print(sys.version)"

      - name: Download Distribution
        uses: actions/download-artifact@v2
        with:
          name: dist
          path: dist

      - name: List contents of dist
        run: ls -al dist

      - name: Set env
        run: echo "wheel_filename=$(find dist -name ${{ matrix.packageName }})" >> $GITHUB_ENV

      - name: Test env
        run: echo $wheel_filename

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f test_requirements.txt ]; then pip install -r test_requirements.txt; fi

      - name: Install artifact
        run:
          pip install $wheel_filename

      - name: Test with pytest
        run: pytest tests

  publish-testpypi-pkg:
    runs-on: ubuntu-latest
    needs: [test-artifact-pkg]
    steps:
      - name: Download Distribution
        uses: actions/download-artifact@v2
        with:
          name: dist
          path: dist

      - name: Publish package to TestPyPI
        uses: pypa/gh-action-pypi-publish@master
        with:
          user: __token__
          password: ${{ secrets.TEST_PIPY_TOKEN }}
          repository_url: https://test.pypi.org/legacy/
          verbose: true

  test-testpypi-pkg:
    runs-on: ubuntu-latest
    needs: [publish-testpypi-pkg]
    steps:
      - uses: actions/checkout@v2
        with:
          lfs: true

      - name: Set up Python ${{ env.pythonVersion }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.pythonVersion }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f test_requirements.txt ]; then pip install -r test_requirements.txt; fi

        # dotnetcore2 should be installed from PyPI first, skipping this step
        # seems to try to download dotnetcore2 from Test.PyPI and it causes a dependency problem.
      - name: Install dotnetcore2 dependency
        run: pip install dotnetcore2

      - name: Install test package
        run: pip install -i https://test.pypi.org/simple/ InnerEye-DICOM-RT
      - name: Test with pytest
        run: pytest tests

  publish-pypi-pkg:
    runs-on: ubuntu-latest
    needs: [test-testpypi-pkg]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
    steps:
      - name: Download Distribution
        uses: actions/download-artifact@v2
        with:
          name: dist
          path: dist

      - name: Publish package to PyPI
        uses: pypa/gh-action-pypi-publish@master
        with:
          user: __token__
          password: ${{ secrets.PYPI_TOKEN }}

  test-pypi-pkg:
    runs-on: ubuntu-latest
    needs: [publish-pypi-pkg]
    if: "!startsWith(github.ref, 'refs/tags')"
    steps:
      - uses: actions/checkout@v2
        with:
          lfs: true

      - name: Set up Python ${{ env.pythonVersion }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.pythonVersion }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f test_requirements.txt ]; then pip install -r test_requirements.txt; fi

      - name: Install package
        run: pip install InnerEye-DICOM-RT
      - name: Test with pytest
        run: pytest tests
